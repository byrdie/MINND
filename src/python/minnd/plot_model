import numpy as np

import matplotlib.pyplot as plt
from matplotlib import colors

from plot_conv_weights import plot_conv_weights

import h5py

from scroll_stepper import IndexTracker

from keras import backend as Keras
from keras.models import load_model

from scipy.stats.stats import pearsonr

from quiver_engine import server

test_index = '/minnd/datasets/levelB/test/database.h5'

def make_fn(bp, i, j, k, l):
    return bp + str(i) + '_' + str(j) + '_' + str(k) + '_' + str(l) + '.png'

def save_plt(data, bp, i, j, k, l, cmap='gray'):
    fig = plt.imshow(np.rot90(data), cmap=cmap)
    plt.axis('off')
    fig.axes.get_xaxis().set_visible(False)
    fig.axes.get_yaxis().set_visible(False)
    plt.savefig(make_fn(bp, i, j, k, l), bbox_inches='tight', pad_inches=0)

with h5py.File(test_index, 'r') as f:
    test_y = f['label']
    test_x = f['data']
    test_orig = f['orig']

    net = load_model('test_model.h5')

    test_x = test_x[:, :, 25:125,:]
    test_orig = test_orig[:, 25:125,:]

    ind = 1407

    bp = 'model_plt/img_'

    I = 2 + len(net.layers) + 1
    J = 3
    K = 4
    L = 4

    # cm = ['spring', 'summer', 'autumn', 'winter']
    # cm = ['bone', 'pink', 'hot', 'copper']

    cm = [['viridis', 'plasma', 'inferno', 'magma'],
          ['Purples', 'Blues', 'Greens',' Oranges', 'Reds'],
          ['YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu'],
          ['GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn']]

    fp = 0

    for i in range(0,I): # Loop through rows
        if i > 1 and i < 5:
            w = net.layers[i - 2].get_weights()[0]
            fp += w.size
        for j in range(0,J): # Loop through columns
            for k in range(0,K):    # Loop through hyperrows
                for l in range(0,L):    # Loop through hypercolumns

                    if i == 0 and j==2 and k==0 and l==0:  # Zeroth row
                        if j == 2:  # Original image
                            save_plt(test_orig[ind,:,:], bp, i, j, k, l)
                    elif i == 1 and j == 2 and l == 0:  # First row
                        if k < 2:
                            save_plt(test_x[ind, k, :, :], bp, i, j, k, l, cmap=cm[i-1][k])

                    if i > 1  and i < 4:

                        if j == 1 and k < w.shape[3] and l < w.shape[2]:
                            # print(w.shape)
                            save_plt(w[:, :, l, k], bp, i, j, k, l, cmap=cm[i-2][l])

                        i_net = Keras.function([net.layers[0].input], [net.layers[i-2].output])
                        o = i_net([[test_x[ind, :, :, :]]])[0]
                        # print(o.shape)
                        if j == 2 and k < o.shape[1] and l == 0:
                            save_plt(o[0, k, :, :], bp, i, j, k, l, cmap=cm[i-1][k])

                    if i == 4 and j==2 and k == 0 and l ==0:
                        fig = plt.figure()
                        ax = fig.add_subplot(111)
                        ax.set_aspect(20)
                        i_net = Keras.function([net.layers[0].input], [net.layers[i - 2].output])
                        o = i_net([[test_x[ind, :, :, :]]])[0]
                        data = np.squeeze(o[0, k, :, :])
                        ax.plot(data)
                        # plt.axis('off')
                        # ax.get_xaxis().set_visible(False)
                        # ax.get_yaxis().set_visible(False)
                        plt.savefig(make_fn(bp, i, j, k, l), bbox_inches='tight', pad_inches=0)


    print('free parameters', fp)


    # w1 = net.layers[0].get_weights()[0]
    #
    # s1 = w1.shape
    #
    # print(s1)
    #
    # W1 = np.zeros([s1[0]+2, s1[1]+2, s1[2], s1[3]], dtype=np.float32)
    # W1[1:s1[0]+1,1:s1[1]+1,:,:] = w1
    # W1 = W1.transpose([2, 1, 3, 0])
    # S1 = W1.shape
    # W1 = W1.reshape([S1[0] * S1[1], S1[2] * S1[3]])
    #
    #
    # plt.figure()
    # plt.imshow(W1)
    #
    #
    #
    # o1 = np.squeeze(i_net([[test_x[2047,:,:,:]]])[0])
    #
    # os1 = o1.shape
    # print(os1)
    # O1 = np.zeros([os1[0], os1[1] + 2, os1[2]+2], dtype=np.float32)
    # O1[:,1:os1[1]+1,1:os1[2]+1] = o1
    # O1 = O1.transpose([1, 0, 2])
    # Os1 = O1.shape
    # O1 = O1.reshape([Os1[0], Os1[1] * Os1[2]])
    #
    # plt.figure()
    # plt.imshow(O1)



    #
    # plt.show()