name: "MINND_v1"
# Data layer for storing input images
# These images are the results of the MOSES forward model
layer{
	name: 	"minnd_input"
	type: 	"HDF5Data"
	top:	"data"
	top:	"label"
	
	include {
		phase: TEST
	}
	
	hdf5_data_param {
		source: "/minnd/datasets/levelB/test_index.txt"
		batch_size: 256
	}
}

layer{
	name: 	"minnd_input"
	type: 	"HDF5Data"
	top:	"data"
	top:	"label"
	
	include {
		phase: TRAIN
	}
	
	hdf5_data_param {
		source: "/minnd/datasets/levelB/train_index.txt"
		batch_size: 256
	}
}

# Second Convolutional Layer
layer {
	name: 	"conv2"
	type: 	"Deconvolution"
	bottom: "data"
	top: 	"conv2"
	
	# learning rate and decay multipliers for the filters
	param { lr_mult: 1 decay_mult: 1 }
  	# learning rate and decay multipliers for the biases
  	param { lr_mult: 2 decay_mult: 0 }
  
	convolution_param {	
	  	num_output:		96
	  	kernel_h:		11
		kernel_w:		11	
	  	stride_h:		1
		stride_w:		1
		pad_h:			5
		pad_w:			5
	  
	  	weight_filler {
		  	type: "gaussian" # initialize the filters from a Gaussian
		  	std: 0.01       # distribution with stdev 0.001 (default mean: 0)
		}
		bias_filler {
		  	type: "constant" # initialize the biases to zero (0)
		  	value: 0
		}
    }
}

layer {
	name: 	"conv2_act"
	type:	"ReLU"
	bottom:	"conv2"
	top:	"conv2"
}


# Third Convolutional Layer
layer {
	name: 	"conv3"
	type: 	"Deconvolution"
	bottom: "conv2"
	top: 	"conv3"
	
	# learning rate and decay multipliers for the filters
	param { lr_mult: 1 decay_mult: 1 }
  	# learning rate and decay multipliers for the biases
  	param { lr_mult: 2 decay_mult: 0 }
  
	convolution_param {	
	  	num_output:		96
	  	kernel_h:		21
		kernel_w:		21	
	  	stride_h:		1
		stride_w:		1
		pad_h:			10
		pad_w:			10
	  
	  	weight_filler {
		  	type: "gaussian" # initialize the filters from a Gaussian
		  	std: 0.01       # distribution with stdev 0.001 (default mean: 0)
		}
		bias_filler {
		  	type: "constant" # initialize the biases to zero (0)
		  	value: 0
		}
    }
}

layer {
	name: 	"conv3_act"
	type:	"ReLU"
	bottom:	"conv3"
	top:	"conv3"
}


# Fourth Convolutional Layer
layer {
	name: 	"conv4"
	type: 	"Deconvolution"
	bottom: "conv3"
	top: 	"conv4"
	
	# learning rate and decay multipliers for the filters
	param { lr_mult: 1 decay_mult: 1 }
  	# learning rate and decay multipliers for the biases
  	param { lr_mult: 2 decay_mult: 0 }
  
	convolution_param {	
	  	num_output:		1
	  	kernel_h:		21
		kernel_w:		21	
	  	stride_h:		1
		stride_w:		1
		pad_h:			10
		pad_w:			10
	  
	  	weight_filler {
		  	type: "gaussian" # initialize the filters from a Gaussian
		  	std: 0.01       # distribution with stdev 0.001 (default mean: 0)
		}
		bias_filler {
		  	type: "constant" # initialize the biases to zero (0)
		  	value: 0
		}
    }
}

layer {
	name: "loss"
	type: "EuclideanLoss"
	bottom: "conv4"
	bottom: "label"
	top: "loss"	
}

